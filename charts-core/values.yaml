replicaCount: 2
nameOverride: # app name, may be the same as image.name

additionalLabelsEnabled: false
additionalLabels: {}
  
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  rules:
  - apiGroups: []
    resources: []
    verbs: []

  

podAnnotations: {}

podSecurityContext: 
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  # fsGroup: 2000

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - SYS_ADMIN
      - SYS_PTRACE
      - SYS_MODULE
      - DAC_READ_SEARCH
      - DAC_OVERRIDE
      - CHOWN
      - SETFCAP
      - KILL
      - NET_ADMIN
      - NET_RAW
  # readOnlyRootFilesystem: true

#Automates creation of default network policy, which is responsible for handling traffic between pod - service - traefik 
defaultNetworkPolicyEnabled: true

#Additional Network Polices configuration
elasticNetworkPolicyEnabled: true
elasticNamespace: develop

redisNetworkPolicyEnabled: true
redisCidr: "#{redisCidr}#"
sqlNetworkPolicyEnabled: true
servicebusNetworkPolicyEnabled: true
vnetCidr: "#{vnetCidr}#"

mongodbNetworkPolicyEnabled: false
automountServiceAccountToken: false
lnmElasticNetworkPolicyEnabled: false

service:
  enabled: true
  type: ClusterIP
  port: 80

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 4
  targetCPUUtilizationPercentage: 70

podDisruptionBudget:
  enabled: true
  minAvailable: "50%"

#Algoritgm for creation ingress rule (ingressRoutes.routes.rule)
#1. If the value ingressRoutes.routes[x].rule is present, use it
#2. If ingressRoutes.routes[x].rule is absent:
# - check if envVars exists, if not  - fail with communicate: ".Values.envVars must be enabled and not empty in order to create ingress rule"
# - check if ASPNETCORE_ENVIRONMENT is defined within envVars, if not - fail with communicate: ".Values.envVars is present, bud does not contain ASPNETCORE_ENVIRONMENT"
# - depending on isStipPrefixEnabled create either "Host(envVars[ASPNETCORE_ENVIRONMENT].$ingressRoutes.domain)" or "Host(envVars[ASPNETCORE_ENVIRONMENT].$ingressRoutes.domain) && PathPrefix($ingressRoutes.routes[x].stripPrefixes[y])" rule
ingressRoutes: 
  enabled: true
  domain: ecovadis-itlab.com
  routes:
  - ruleName: http
    #rule: Host(`develop.ecovadis-itlab.com`) 
    #stripPrefixes:
    #  - /vadisservice

envVarsEnabled: true
envVars: 
  ASPNETCORE_ENVIRONMENT: Develop

secEnvVarsEnabled: true
secEnvVars: {}
    #APP_INSIGHT_KEY: TEST

appConfigFilesEnabled: true
appConfigFiles:
  globPattern: "**.json"
  dir: "/app/"
  filesList: []
    #- "appsettings.json"

nodeSelector: {}

tolerations: []

affinity: {}

servicemonitor:
  enabled: false